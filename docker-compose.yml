services:
  certificates-builder:
    build:
      context: .
      dockerfile: Dockerfile.certificates
    environment:
      - PACKAGE_TYPE=${PACKAGE_TYPE}
      - CERT_VERSION=${CERT_VERSION:-1.0.0}
    volumes:
      - ./output:/output

  kube-proxy-builder:
    build:
      context: .
      dockerfile: Dockerfile.kube-proxy
      args:
        - KUBE_GIT_URL=${KUBE_GIT_URL}
        - KUBE_VERSION=${KUBE_VERSION}
    environment:
      - PACKAGE_TYPE=${PACKAGE_TYPE}
    entrypoint: ["sh", "-c", "cp /usr/local/bin/kube-proxy /output/kube-proxy && PACKAGE_TYPE=${PACKAGE_TYPE} /usr/local/bin/package-builder.sh kube-proxy \"${KUBE_VERSION}\" \"Kubernetes Network Proxy\" && find / -name '*.deb' -name '*.rpm' -exec cp {} /output/ \\; && ls -la /output/"]
    volumes:
      - ./output:/output

  kubelet-builder:
    build:
      context: .
      dockerfile: Dockerfile.kubelet
      args:
        - KUBE_GIT_URL=${KUBE_GIT_URL}
        - KUBE_VERSION=${KUBE_VERSION}
    environment:
      - PACKAGE_TYPE=${PACKAGE_TYPE}
    entrypoint: ["sh", "-c", "cp /usr/local/bin/kubelet /output/kubelet && PACKAGE_TYPE=${PACKAGE_TYPE} /usr/local/bin/package-builder.sh kubelet \"${KUBE_VERSION}\" \"Kubernetes Node Agent\" && find / -name '*.deb' -name '*.rpm' -exec cp {} /output/ \\; && ls -la /output/"]
    volumes:
      - ./output:/output

  etcd-builder:
    build:
      context: .
      dockerfile: Dockerfile.etcd
      args:
        - ETCD_VERSION=${ETCD_VERSION}
    environment:
      - PACKAGE_TYPE=${PACKAGE_TYPE}
    entrypoint: ["sh", "-c", "cp /usr/local/bin/etcd /output/etcd && cp /usr/local/bin/etcdctl /output/etcdctl && PACKAGE_TYPE=${PACKAGE_TYPE} /usr/local/bin/package-builder.sh etcd \"${ETCD_VERSION}\" \"etcd distributed key-value store\" && PACKAGE_TYPE=${PACKAGE_TYPE} /usr/local/bin/package-builder.sh etcdctl \"${ETCD_VERSION}\" \"etcd command line client\" && ls -la /output/"]
    volumes:
      - ./output:/output

  kube-scheduler-builder:
    build:
      context: .
      dockerfile: Dockerfile.kube-scheduler
      args:
        - KUBE_GIT_URL=${KUBE_GIT_URL}
        - KUBE_VERSION=${KUBE_VERSION}
    environment:
      - PACKAGE_TYPE=${PACKAGE_TYPE}
    entrypoint: ["sh", "-c", "cp /usr/local/bin/kube-scheduler /output/kube-scheduler && PACKAGE_TYPE=${PACKAGE_TYPE} /usr/local/bin/package-builder.sh kube-scheduler \"${KUBE_VERSION}\" \"Kubernetes Scheduler\" && find / -name '*.deb' -name '*.rpm' -exec cp {} /output/ \\; && ls -la /output/"]
    volumes:
      - ./output:/output

  kube-controller-manager-builder:
    build:
      context: .
      dockerfile: Dockerfile.kube-controller-manager
      args:
        - KUBE_GIT_URL=${KUBE_GIT_URL}
        - KUBE_VERSION=${KUBE_VERSION}
    environment:
      - PACKAGE_TYPE=${PACKAGE_TYPE}
    entrypoint: ["sh", "-c", "cp /usr/local/bin/kube-controller-manager /output/kube-controller-manager && PACKAGE_TYPE=${PACKAGE_TYPE} /usr/local/bin/package-builder.sh kube-controller-manager \"${KUBE_VERSION}\" \"Kubernetes Controller Manager\" && find / -name '*.deb' -name '*.rpm' -exec cp {} /output/ \\; && ls -la /output/"]
    volumes:
      - ./output:/output

  kube-apiserver-builder:
    build:
      context: .
      dockerfile: Dockerfile.kube-apiserver
      args:
        - KUBE_GIT_URL=${KUBE_GIT_URL}
        - KUBE_VERSION=${KUBE_VERSION}
    environment:
      - PACKAGE_TYPE=${PACKAGE_TYPE}
    entrypoint: ["sh", "-c", "cp /usr/local/bin/kube-apiserver /output/kube-apiserver && PACKAGE_TYPE=${PACKAGE_TYPE} /usr/local/bin/package-builder.sh kube-apiserver \"${KUBE_VERSION}\" \"Kubernetes API Server\" && find / -name '*.deb' -name '*.rpm' -exec cp {} /output/ \\; && ls -la /output/"]
    volumes:
      - ./output:/output

  kubectl-builder:
    build:
      context: .
      dockerfile: Dockerfile.kubectl
      args:
        - KUBE_GIT_URL=${KUBE_GIT_URL}
        - KUBE_VERSION=${KUBE_VERSION}
    environment:
      - PACKAGE_TYPE=${PACKAGE_TYPE}
    entrypoint: ["sh", "-c", "cp /usr/local/bin/kubectl /output/kubectl && PACKAGE_TYPE=${PACKAGE_TYPE} /usr/local/bin/package-builder.sh kubectl \"${KUBE_VERSION}\" \"Kubernetes Command Line Tool\" && find / -name '*.deb' -name '*.rpm' -exec cp {} /output/ \\; && ls -la /output/"]
    volumes:
      - ./output:/output

  flannel-builder:
    build:
      context: .
      dockerfile: Dockerfile.flannel
      args:
        - FLANNEL_VERSION=v0.26.4
        - FLANNEL_GIT_URL=https://github.com/flannel-io/flannel.git
    environment:
      - PACKAGE_TYPE=${PACKAGE_TYPE}
    entrypoint: ["sh", "-c", "cp /usr/local/bin/flanneld /output/flanneld && PACKAGE_TYPE=${PACKAGE_TYPE} /usr/local/bin/package-builder.sh flanneld \"${FLANNEL_VERSION}\" \"Flannel Network Fabric for Containers\" && find / -name '*.deb' -name '*.rpm' -exec cp {} /output/ \\; && ls -la /output/"]
    volumes:
      - ./output:/output
      
  calico-builder:
    build:
      context: .
      dockerfile: Dockerfile.calico
      args:
        - CALICO_VERSION=${CALICO_VERSION}
        - CALICO_GIT_URL=${CALICO_GIT_URL}
    environment:
      - PACKAGE_TYPE=${PACKAGE_TYPE}
    entrypoint: ["sh", "-c", "cp /usr/local/bin/calico-node /output/calico-node && cp /usr/local/bin/calico-felix /output/calico-felix && cp /usr/local/bin/calico /output/calico && cp /usr/local/bin/calico-ipam /output/calico-ipam && cp /usr/local/bin/calico-kube-controllers /output/calico-kube-controllers && PACKAGE_TYPE=${PACKAGE_TYPE} /usr/local/bin/package-builder.sh calico-node \"${CALICO_VERSION}\" \"Calico Node Agent\" && PACKAGE_TYPE=${PACKAGE_TYPE} /usr/local/bin/package-builder.sh calico-felix \"${CALICO_VERSION}\" \"Calico Felix Agent\" && PACKAGE_TYPE=${PACKAGE_TYPE} /usr/local/bin/package-builder.sh calico \"${CALICO_VERSION}\" \"Calico CNI Plugin\" && PACKAGE_TYPE=${PACKAGE_TYPE} /usr/local/bin/package-builder.sh calico-ipam \"${CALICO_VERSION}\" \"Calico IPAM Plugin\" && PACKAGE_TYPE=${PACKAGE_TYPE} /usr/local/bin/package-builder.sh calico-kube-controllers \"${CALICO_VERSION}\" \"Calico Kubernetes Controllers\" && find / -name '*.deb' -name '*.rpm' -exec cp {} /output/ \\; && ls -la /output/"]
    volumes:
      - ./output:/output
