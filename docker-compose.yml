services:
  kube-proxy-builder:
    build:
      context: .
      dockerfile: Dockerfile.kube-proxy
      args:
        - KUBE_GIT_URL=${KUBE_GIT_URL}
        - KUBE_VERSION=${KUBE_VERSION}
    entrypoint: ["sh", "-c", "cp /usr/local/bin/kube-proxy /output/kube-proxy && find / -name '*.deb' -exec cp {} /output/ \\; && ls -la /output/"]
    volumes:
      - ./output:/output

  kubelet-builder:
    build:
      context: .
      dockerfile: Dockerfile.kubelet
      args:
        - KUBE_GIT_URL=${KUBE_GIT_URL}
        - KUBE_VERSION=${KUBE_VERSION}
    entrypoint: ["sh", "-c", "cp /usr/local/bin/kubelet /output/kubelet && find / -name '*.deb' -exec cp {} /output/ \\; && ls -la /output/"]
    volumes:
      - ./output:/output

  etcd-builder:
    build:
      context: .
      dockerfile: Dockerfile.etcd
      args:
        - ETCD_VERSION=${ETCD_VERSION}
    entrypoint: ["sh", "-c", "cp /usr/local/bin/etcd /output/etcd && cp /usr/local/bin/etcdctl /output/etcdctl && /usr/local/bin/package-builder.sh etcd \"${ETCD_VERSION}\" \"etcd distributed key-value store\" && /usr/local/bin/package-builder.sh etcdctl \"${ETCD_VERSION}\" \"etcd command line client\" && ls -la /output/"]
    volumes:
      - ./output:/output

  kube-scheduler-builder:
    build:
      context: .
      dockerfile: Dockerfile.kube-scheduler
      args:
        - KUBE_GIT_URL=${KUBE_GIT_URL}
        - KUBE_VERSION=${KUBE_VERSION}
    entrypoint: ["sh", "-c", "cp /usr/local/bin/kube-scheduler /output/kube-scheduler && find / -name '*.deb' -exec cp {} /output/ \\; && ls -la /output/"]
    volumes:
      - ./output:/output

  kube-controller-manager-builder:
    build:
      context: .
      dockerfile: Dockerfile.kube-controller-manager
      args:
        - KUBE_GIT_URL=${KUBE_GIT_URL}
        - KUBE_VERSION=${KUBE_VERSION}
    entrypoint: ["sh", "-c", "cp /usr/local/bin/kube-controller-manager /output/kube-controller-manager && find / -name '*.deb' -exec cp {} /output/ \\; && ls -la /output/"]
    volumes:
      - ./output:/output

  kube-apiserver-builder:
    build:
      context: .
      dockerfile: Dockerfile.kube-apiserver
      args:
        - KUBE_GIT_URL=${KUBE_GIT_URL}
        - KUBE_VERSION=${KUBE_VERSION}
    entrypoint: ["sh", "-c", "cp /usr/local/bin/kube-apiserver /output/kube-apiserver && find / -name '*.deb' -exec cp {} /output/ \\; && ls -la /output/"]
    volumes:
      - ./output:/output

  kubectl-builder:
    build:
      context: .
      dockerfile: Dockerfile.kubectl
      args:
        - KUBE_GIT_URL=${KUBE_GIT_URL}
        - KUBE_VERSION=${KUBE_VERSION}
    entrypoint: ["sh", "-c", "cp /usr/local/bin/kubectl /output/kubectl && find / -name '*.deb' -exec cp {} /output/ \\; && ls -la /output/"]
    volumes:
      - ./output:/output

  flannel-builder:
    build:
      context: .
      dockerfile: Dockerfile.flannel
      args:
        - FLANNEL_VERSION=v0.26.4
        - FLANNEL_GIT_URL=https://github.com/flannel-io/flannel.git
    entrypoint: ["sh", "-c", "cp /usr/local/bin/flanneld /output/flanneld && find / -name '*.deb' -exec cp {} /output/ \\; && ls -la /output/"]
    volumes:
      - ./output:/output
      
  calico-builder:
    build:
      context: .
      dockerfile: Dockerfile.calico
      args:
        - CALICO_VERSION=${CALICO_VERSION}
        - CALICO_GIT_URL=${CALICO_GIT_URL}
    entrypoint: ["sh", "-c", "cp /usr/local/bin/calico-node /output/calico-node && cp /usr/local/bin/calico-felix /output/calico-felix && cp /usr/local/bin/calico /output/calico && cp /usr/local/bin/calico-ipam /output/calico-ipam && cp /usr/local/bin/calico-kube-controllers /output/calico-kube-controllers && find / -name '*.deb' -exec cp {} /output/ \\; && ls -la /output/"]
    volumes:
      - ./output:/output
