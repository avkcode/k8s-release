name: Publish Packages

on:
  workflow_dispatch:
    inputs:
      kube_version:
        description: 'Kubernetes version to build'
        required: false
        default: 'v1.32.2'
      etcd_version:
        description: 'etcd version to build'
        required: false
        default: 'v3.5.9'
      flannel_version:
        description: 'Flannel version to build'
        required: false
        default: 'v0.26.4'
      calico_version:
        description: 'Calico version to build'
        required: false
        default: 'v3.28.0'
      package_type:
        description: 'Package type (deb or rpm)'
        required: false
        default: 'deb'
        type: choice
        options:
          - deb
          - rpm

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component:
          - kube-proxy
          - kubelet
          - etcd
          - kube-scheduler
          - kube-controller-manager
          - kube-apiserver
          - kubectl
          - flannel
          - calico
          - certificates

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ${{ matrix.component }}
        run: |
          KUBE_VERSION=${{ github.event.inputs.kube_version || 'v1.32.2' }} \
          ETCD_VERSION=${{ github.event.inputs.etcd_version || 'v3.5.9' }} \
          FLANNEL_VERSION=${{ github.event.inputs.flannel_version || 'v0.26.4' }} \
          CALICO_VERSION=${{ github.event.inputs.calico_version || 'v3.28.0' }} \
          PACKAGE_TYPE=${{ github.event.inputs.package_type || 'deb' }} \
          DOCKER_COMPOSE="docker compose" \
          make build-${{ matrix.component }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.component }}-packages
          path: output/
          retention-days: 7

  publish:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Prepare release artifacts
        run: |
          mkdir -p release-artifacts
          find all-artifacts -type f \( -name "*.deb" -o -name "*.rpm" \) | xargs -I{} cp {} release-artifacts/

      - name: Upload combined artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kubernetes-packages
          path: release-artifacts/
          retention-days: 7
          
      - name: Set up package repositories
        run: |
          mkdir -p debian/main rpm
          
          # Copy DEB packages to debian repo structure
          cp release-artifacts/*.deb debian/main/ || true
          
          # Copy RPM packages to rpm repo structure
          cp release-artifacts/*.rpm rpm/ || true
          
      - name: Create Debian repository
        if: ${{ github.event.inputs.package_type == 'deb' || github.event.inputs.package_type == null }}
        run: |
          cd debian
          apt-get update && apt-get install -y dpkg-dev
          dpkg-scanpackages main /dev/null > main/Packages
          cat main/Packages
          gzip -k main/Packages
          
      - name: Create RPM repository
        if: ${{ github.event.inputs.package_type == 'rpm' }}
        run: |
          cd rpm
          apt-get update && apt-get install -y createrepo-c
          createrepo .
          
      - name: Publish to GitHub Packages
        uses: actions/upload-artifact@v4
        with:
          name: package-repositories
          path: |
            debian/
            rpm/
          retention-days: 30
