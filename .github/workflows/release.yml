name: Create Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component:
          - kube-proxy
          - kubelet
          - etcd
          - kube-scheduler
          - kube-controller-manager
          - kube-apiserver
          - kubectl
          - flannel
          - calico
          - certificates
        package_type: [deb, rpm]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract tag version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build ${{ matrix.component }} (${{ matrix.package_type }})
        run: |
          KUBE_VERSION=${{ steps.get_version.outputs.VERSION }} \
          PACKAGE_TYPE=${{ matrix.package_type }} \
          DOCKER_COMPOSE="docker compose" \
          make build-${{ matrix.component }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.component }}-${{ matrix.package_type }}
          path: output/
          retention-days: 7

  create-release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Prepare release artifacts
        run: |
          mkdir -p release-artifacts
          find all-artifacts -type f \( -name "*.deb" -o -name "*.rpm" -o -name "kube*" -o -name "etcd*" -o -name "flannel*" -o -name "calico*" \) | xargs -I{} cp {} release-artifacts/
          ls -la release-artifacts/

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: release-artifacts/*
          draft: false
          prerelease: false
          generate_release_notes: true
          
      - name: Set up package repositories
        run: |
          mkdir -p debian/main rpm
          
          # Copy DEB packages to debian repo structure
          cp release-artifacts/*.deb debian/main/ || true
          
          # Copy RPM packages to rpm repo structure
          cp release-artifacts/*.rpm rpm/ || true
          
      - name: Create Debian repository
        run: |
          cd debian
          apt-get update && apt-get install -y dpkg-dev
          dpkg-scanpackages main /dev/null > main/Packages
          cat main/Packages
          gzip -k main/Packages
          
      - name: Create RPM repository
        run: |
          cd rpm
          apt-get update && apt-get install -y createrepo-c
          createrepo .
          
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Publish to GitHub Packages
        run: |
          # First upload as artifact for easy download
          echo "Uploading package repositories as artifacts"
          mkdir -p package-repositories
          cp -r debian/ rpm/ package-repositories/
          
          # Then publish packages to GitHub Packages registry
          echo "Publishing packages to GitHub Packages registry"
          for pkg in release-artifacts/*.deb release-artifacts/*.rpm; do
            if [ -f "$pkg" ]; then
              # The packages are already uploaded to the GitHub Release
              # This step ensures they're also visible in the Packages UI
              pkg_name=$(basename $pkg)
              pkg_version=$(echo $pkg_name | grep -oP '(?<=_)[0-9]+\.[0-9]+\.[0-9]+(?=_)')
              if [ -z "$pkg_version" ]; then
                # Extract version from tag
                pkg_version="${{ steps.get_version.outputs.VERSION }}"
                pkg_version="${pkg_version#v}"
              fi
              
              echo "Publishing $pkg_name with version $pkg_version to GitHub Packages"
              
              # Use GitHub API to ensure package is visible in Packages UI
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$pkg" \
                "https://api.github.com/orgs/$(echo ${{ github.repository }} | cut -d '/' -f 1)/packages/generic/kubernetes-packages/$pkg_version/$pkg_name"
            fi
          done
          
      - name: Upload package repositories as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-repositories
          path: package-repositories/
          retention-days: 30
