FROM golang:1.20 AS builder

# Define ARG for Kubernetes version
ARG KUBE_VERSION
ARG KUBE_GIT_URL

# Set the environment variable using the ARG
ENV KUBE_VERSION=${KUBE_VERSION}
ENV KUBE_GIT_URL=${KUBE_GIT_URL}

ENV GO111MODULE=on
ENV GOPATH=/go
ENV PATH=$PATH:/usr/local/go/bin:$GOPATH/bin

RUN apt-get update && apt-get install -y \
    make \
    gcc \
    git \
    bash \
    rsync \
    && rm -rf /var/lib/apt/lists/*

RUN git clone ${KUBE_GIT_URL} /kubernetes && \
    cd /kubernetes && \
    git checkout ${KUBE_VERSION}

WORKDIR /kubernetes
RUN make WHAT=cmd/kubelet

RUN ls -l /kubernetes/_output/bin/

FROM debian:bullseye-slim

# Define ARG again for the second stage
ARG KUBE_VERSION

# Set the environment variable in the second stage
ENV KUBE_VERSION=${KUBE_VERSION}

RUN apt-get update && apt-get install -y \
    iptables \
    iproute2 \
    conntrack \
    dpkg \
    dpkg-dev \
    && rm -rf /var/lib/apt/lists/*

COPY --from=builder /kubernetes/_output/bin/kubelet /usr/local/bin/kubelet
COPY package-builder.sh /usr/local/bin/package-builder.sh

# Create directories for systemd units and config files
RUN mkdir -p /systemd-units /config-files

# Copy systemd unit files and config files
COPY systemd-units/kubelet.service /systemd-units/
COPY config-files/kubelet-config.yaml /config-files/

RUN chmod +x /usr/local/bin/package-builder.sh

# Create output directory first with proper permissions
RUN mkdir -p /output && chmod 777 /output

# Create Debian package
RUN /usr/local/bin/package-builder.sh kubelet "${KUBE_VERSION}" "Kubernetes Node Agent" && \
    ls -la /output

# Make sure the output directory has the right permissions
RUN chmod -R 777 /output

VOLUME ["/output"]

# Copy the packages to a more accessible location
RUN cp /output/*.deb / || true

ENTRYPOINT ["kubelet"]

CMD ["--help"]
