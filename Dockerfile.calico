FROM golang:1.23 AS builder

# Define ARGs
ARG CALICO_VERSION
ARG CALICO_GIT_URL

# Set environment variables
ENV CALICO_VERSION=${CALICO_VERSION}
ENV CALICO_GIT_URL=${CALICO_GIT_URL}

ENV GO111MODULE=on
ENV GOPATH=/go
ENV PATH=$PATH:/usr/local/go/bin:$GOPATH/bin

# Install necessary dependencies
RUN apt-get update && apt-get install -y \
    make \
    gcc \
    git \
    bash \
    rsync \
    libpcap-dev \
    python3 \
    && rm -rf /var/lib/apt/lists/*

# Clone and build Calico
RUN git clone ${CALICO_GIT_URL} /calico && \
    cd /calico && \
    git checkout ${CALICO_VERSION}

# Build Calico binaries
WORKDIR /calico

# Install additional dependencies needed for building libbpf
RUN apt-get update && apt-get install -y \
    clang \
    llvm \
    libelf-dev \
    bc \
    libbpf-dev \
    bpftool \
    && rm -rf /var/lib/apt/lists/*

# Create necessary directories for libbpf
RUN mkdir -p /calico/felix/bpf-gpl/include/libbpf/src/amd64

# Manually build libbpf.a
RUN cd /calico/felix/bpf-gpl/include/libbpf/src && \
    mkdir -p amd64 && \
    cp /usr/lib/x86_64-linux-gnu/libbpf.a amd64/libbpf.a

# Modify Makefiles to avoid using Docker
RUN find . -name Makefile -exec sed -i 's/docker run/# docker run/g' {} \; && \
    find . -name "*.mk" -exec sed -i 's/docker run/# docker run/g' {} \; && \
    find . -name Makefile -exec sed -i 's/docker build/# docker build/g' {} \; && \
    find . -name "*.mk" -exec sed -i 's/docker build/# docker build/g' {} \; && \
    # Modify specific Makefiles to avoid Docker dependencies
    sed -i 's|make -C ../felix libbpf|# make -C ../felix libbpf|g' /calico/node/Makefile && \
    sed -i 's|../felix/bpf-gpl/include/libbpf/src/amd64/libbpf.a|# ../felix/bpf-gpl/include/libbpf/src/amd64/libbpf.a|g' /calico/node/Makefile

# Create bin directory
RUN mkdir -p /calico/bin

# Find the correct paths for CNI plugin components and build them
RUN mkdir -p /calico/bin && \
    # First, let's find the main packages
    find /calico -path "*/cni-plugin/*" -name "main.go" && \
    # Build the CNI plugin components directly
    cd /calico && \
    CGO_ENABLED=0 go build -v -o /calico/bin/calico ./cni-plugin/cmd/calico && \
    # For calico-ipam, we need to find where it's located in this version
    if [ -d "/calico/cni-plugin/cmd/ipam" ]; then \
        CGO_ENABLED=0 go build -v -o /calico/bin/calico-ipam ./cni-plugin/cmd/ipam; \
    elif [ -d "/calico/cni-plugin/internal/pkg/ipam" ]; then \
        # If it's not a separate binary but part of the main one, create a symlink
        ln -sf /calico/bin/calico /calico/bin/calico-ipam; \
    else \
        # Try to find it elsewhere
        IPAM_DIR=$(find /calico -path "*/ipam/cmd" -type d | head -1); \
        if [ -n "$IPAM_DIR" ]; then \
            CGO_ENABLED=0 go build -v -o /calico/bin/calico-ipam $IPAM_DIR; \
        else \
            # Create a symlink as fallback
            ln -sf /calico/bin/calico /calico/bin/calico-ipam; \
        fi; \
    fi && \
    # Build the other components
    cd /calico/kube-controllers && \
    CGO_ENABLED=0 go build -v -o /calico/bin/calico-kube-controllers ./cmd/kube-controllers/ && \
    cd /calico/node && \
    CGO_ENABLED=0 go build -v -o /calico/bin/calico-node ./cmd/calico-node/ && \
    cd /calico/felix && \
    CGO_ENABLED=0 go build -v -o /calico/bin/calico-felix ./cmd/calico-felix/

# List the built binaries for verification
RUN ls -la /calico/bin/

# Stage 2: Runtime stage
FROM debian:bullseye-slim

# Define ARG again for the second stage
ARG CALICO_VERSION

# Set the environment variable in the second stage
ENV CALICO_VERSION=${CALICO_VERSION}

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    iptables \
    iproute2 \
    ipset \
    iputils-ping \
    conntrack \
    dpkg \
    dpkg-dev \
    rpm \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Copy the built binaries from the builder stage
COPY --from=builder /calico/bin/calico-node /usr/local/bin/calico-node
COPY --from=builder /calico/bin/calico-felix /usr/local/bin/calico-felix
COPY --from=builder /calico/bin/calico /usr/local/bin/calico
COPY --from=builder /calico/bin/calico-ipam /usr/local/bin/calico-ipam
COPY --from=builder /calico/bin/calico-kube-controllers /usr/local/bin/calico-kube-controllers
COPY package-builder.sh /usr/local/bin/package-builder.sh

# Create directories for systemd units
RUN mkdir -p /systemd-units /config-files

# Copy systemd unit files
COPY systemd-units/calico-node.service /systemd-units/

RUN chmod +x /usr/local/bin/package-builder.sh

# Create output directory first with proper permissions
RUN mkdir -p /output && chmod 777 /output

# Create packages based on PACKAGE_TYPE
ENV PACKAGE_TYPE=${PACKAGE_TYPE:-deb}
RUN /usr/local/bin/package-builder.sh calico-node "${CALICO_VERSION}" "Calico Node Agent" && \
    /usr/local/bin/package-builder.sh calico-felix "${CALICO_VERSION}" "Calico Felix Agent" && \
    /usr/local/bin/package-builder.sh calico "${CALICO_VERSION}" "Calico CNI Plugin" && \
    /usr/local/bin/package-builder.sh calico-ipam "${CALICO_VERSION}" "Calico IPAM Plugin" && \
    /usr/local/bin/package-builder.sh calico-kube-controllers "${CALICO_VERSION}" "Calico Kubernetes Controllers" && \
    ls -la /output

# Make sure the output directory has the right permissions
RUN chmod -R 777 /output

VOLUME ["/output"]

# Copy the packages to a more accessible location
RUN cp /output/*.deb / || true

# Set the entrypoint for the container
ENTRYPOINT ["calico-node"]

# Default command (can be overridden at runtime)
CMD ["--help"]
